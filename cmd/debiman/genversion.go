// +build ignore

package main

import (
	"bytes"
	"fmt"
	"go/format"
	"io/ioutil"
	"log"
	"os/exec"
	"strings"
	"text/template"
)

var versionTmpl = template.Must(template.New("embedded").Parse(`
package {{ .Package }}

// Generated by "go run genversion.go".
// Do not edit manually.

var debimanVersion = {{ .VersionLiteral }}
`))

// git describe --always
// dbb259f
// midna ~/go/src/github.com/Debian/debiman master $ git log --pretty=format:%cd --date=short -n1
// 2017-01-08

func gitVersion() (string, error) {
	describe, err := exec.Command("git", "describe", "--always").Output()
	if err != nil {
		return "", err
	}

	commitDate, err := exec.Command("git", "log", "--pretty=format:%cd", "--date=short", "-n1").Output()
	return fmt.Sprintf("%s (%s)", strings.TrimSpace(string(describe)), strings.TrimSpace(string(commitDate))), err
}

func main() {
	version, err := gitVersion()
	if err != nil {
		version = fmt.Sprintf("unknown (%v)", err)
	}

	var buf bytes.Buffer
	if err := versionTmpl.Execute(&buf, struct {
		Package        string
		VersionLiteral string
	}{
		Package:        "main",
		VersionLiteral: fmt.Sprintf("%#v", version),
	}); err != nil {
		log.Fatal(err)
	}

	outsrc, err := format.Source(buf.Bytes())
	if err != nil {
		log.Fatalf("Could not format output: %v\nOutput:\n%s", buf.String(), err)
	}

	if err := ioutil.WriteFile("GENERATED_version.go", outsrc, 0644); err != nil {
		log.Fatalf("Could not write output: %v", err)
	}
}
